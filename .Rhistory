for (i in 1:n) {
res <- c(res, sum(runif(size) < prob))
}
res
}
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.1)
rbinom(12, 10, 0.1)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
myrbinom(12, 10, 0.9)
rbinom(12, 10, 0.9)
rbinom()
rbinom
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
myrbinom(1, 1, 0.9)
rbinom(n = 100000, size = 100, prob = 0.07)
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100000, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 1, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100, size = 100, prob = 0.07) %>% mean()
rbinom(n = 100, size = 1, prob = 0.07) %>% mean()
rbinom(n = 100, size = 100, prob = 0.07) %>% mean()
expectedprob <- 0.5
samples <- 10
tries <- 12
rbinom(samples, tries, expectedprob)
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
rbinom(samples, tries, expectedprob) %>% hist()
samples <- 1000
rbinom(samples, tries, expectedprob) %>% hist()
tries <- 1
rbinom(samples, tries, expectedprob) %>% hist()
samples <- 10000
rbinom(samples, tries, expectedprob) %>% hist()
tries <- 12
rbinom(samples, tries, expectedprob) %>% hist()
runif(1)
library(feedeR)
keyword <- "Radiologie"
url <- paste0("https://news.google.com/rss/search?q=",
keyword,
"&ie=utf-8&num=100&hl=de&gl=CH&ceid=CH:de")
feed <- feed.extract(url)
datatable(feed$items)
library(DT)
datatable(feed$items)
datatable(feed$items,
options = list(search = F))
datatable(feed$items,
options = list(dom = ''))
datatable(feed$items,
options = list(dom = 't'))
feed$items[c("title", as.Date(date))]
datatable(feed$items[c("title", "date")],
options = list(dom = 't'))
feed
datatable(feed$items[c("title", "date")],
options = list(dom = 't',
pagination = F))
install.packages("shiny")
# 1.1. Data processing
library(tidyverse)
R.version
install.packages(c("data.table", "DT", "feather", "ggplot2", "ggvis", "leaflet", "lubridate", "plotly", "readxl", "scales", "shiny", "shiny.i18n", "shinyjs", "stringi", "tidyverse", "timevis", "visNetwork"))
# 1.1. Data processing
library(tidyverse)
# 1.1. Data processing
library(tidyverse)
install.packages("tidyverse")
install.packages("modelr")
install.packages("broom")
library(ggplot2)
library(broom)
library(ggplot2)
library(timevis)
library(tidyverse)
installed.packages("tidyverse")
install.packages("tidyverse")
rm(.SLIDIFY_ENV)
ls(all.names = TRUE)
rm(.SLIDIFY_ENV)
install.packages("tidyverse")
install.packages("lattice")
install.packages("tidyverse")
library(tidyverse)
# 1.1. Data processing
library(tidyverse)
library(data.table)
library(lubridate)
library(feather)
# 1.2. UI packages
library(shiny)
library(shinyjs)
library(DT)
library(timevis)
library(ggplot2)
library(ggvis)
library(visNetwork)
library(scales)
library(plotly)
install.packages("plotly")
library(leaflet)
install.packages("leaflet")
library(plotly)
library(leaflet)
library(jsonlite)
library(shiny.i18n)
library(readxl)
library(stringi)
# 2.1.1. Header function
get_overview_header <- function(header_name) {
HTML(paste0("<div><h3><center>", header_name, "</center></h3></div>"))
}
format("2019-02-02")
format("2019-02-02", "%d")
format("2019-02-02", "%d. %M")
format(date("2019-02-02"), "%d. %M")
format(date("2019-02-02"), "%d. %M, %m")
format(date("2019-02-02"), "%d. %M, %MM")
format(date("2019-02-02"), "%d. %M, %M")
format(date("2019-02-02"), "%Y-%b-%d")
format(date("2019-12-02"), "%Y-%b-%d")
format(date("2019-12-02"), "%d %Y %b-%d")
format(date("2019-12-02"), "%A %Y %b-%d")
format(date("2019-12-02"), "%A")
format(date("2019-12-02"), "%A, %d. %b")
format(date("2019-12-02"), "%A, %d. %b. %Y")
runApp('Documents/R/rdashboard')
install.packages("V8")
runApp('Documents/R/rdashboard')
parse_date_time(date("2019-04-03"))
parse_date_time(date("2019-04-03"), "A, d. b Y")
parse_date_time(date("2019-04-03"), "A, d. b Y", locale = "usa")
parse_date_time(date("2019-04-03"), "B", locale = "usa")
parse_date_time(date("2019-04-03"), "B", locale = "us")
?parse_date_time
locale -a
parse_date_time(date("2019-04-03"), "B", locale = "en")
parse_date_time(date("2019-04-03"), "B", locale = "en_AG")
parse_date_time(date("2019-04-03"), "B", locale = "en_In")
parse_date_time(date("2019-04-03"), "B", locale = "en_IN")
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
library(shiny)
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
?geom_point
runApp('Documents/R/rdashboard')
mtcars
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
lubridate::hm("11:30")
lubridate::hm("11:30") %>% class()
runApp('Documents/R/rdashboard')
?hm
lubridate::hm("11:30")
lubridate::hm("11:30", roll = F)
lubridate::hm("11:30", roll = T)
runApp('Documents/R/rdashboard')
dmy_hm(paste0("2000-01-01 ", termine_start_time))
dmy_hm(paste0("2000-01-01 ", "13:12"))
dmy_hm(paste0("2000-01-01 ", "13:10"))
ymd_hm(paste0("2000-01-01 ", "13:10"))
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
cars
mtcars %>% head()
mtcars %>% head() %>% gather()
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
c_trans <- function(a, b, breaks = b$breaks, format = b$format) {
a <- as.trans(a)
b <- as.trans(b)
name <- paste(a$name, b$name, sep = "-")
trans <- function(x) a$trans(b$trans(x))
inv <- function(x) b$inverse(a$inverse(x))
trans_new(name, trans, inverse = inv, breaks = breaks, format=format)
}
rev_date <- c_trans("reverse", "time")
rev_date
runApp('Documents/R/rdashboard')
df_overview_termine_datatable() %>%
gather(event, time, -termine_modality, -patient_name, -doctor_name, -termine_bez, -termine_invoice_id) %>%
ggplot(aes(x = termine_modality, y = ymd_hm(paste0("2000-01-01 ", time)),
group = interaction(termine_invoice_id, termine_modality))) +
geom_path(size = 30) +
scale_y_datetime()
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
reorder?()
?reorder()
reorder(c("a", "c", "b"))
reorder(c("a", "c", "b"), c("a", "c", "b"))
reorder(c("a", "c", "b"), -c("a", "c", "b"))
InsectSprays
InsectSprays %>% head()
?with
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
minute
format(date("2019-02-02"), "%m")
format(ymd_hm("2019-02-02, 09:10"), "%m")
format(ymd_hm("2019-02-02, 09:10"), "%M")
format(ymd_hm("2019-02-02, 09:10"), "%H")
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
runApp('Documents/R/rdashboard')
setwd("~/Documents/R/rdashboard")
shiny::runApp()
runApp()
runApp()
runApp()
df<-tbl_df(data.frame(group=rep(c("A", "B"), each=3), var1=sample(1:100, 6), var2=sample(1:100, 6)))
example<-function(colname){
df %>%
group_by(group)%>%
summarize(output=mean(sqrt(colname)))%>%
select(output)
}
example( quote(var1) )
R.version
??dplyr
library(tidyverse)
df<-tbl_df(data.frame(group=rep(c("A", "B"), each=3), var1=sample(1:100, 6), var2=sample(1:100, 6)))
example<-function(colname){
df %>%
group_by(group)%>%
summarize(output=mean(sqrt(colname)))%>%
select(output)
}
example( quote(var1) )
??dplyr
?dplyr
install.packages(c("ggrepel", "tidyquant", "zoo"))
library(tidyverse)
library(tidyquant)
library(zoo)
library(ggrepel)
library(lubridate)
hsbc    <- tq_get("HSBC", from = "2009-01-01") # usd
paribas <- tq_get("BNP.PA", from = "2009-01-01")    # eur
credagr <- tq_get("ACA.PA", from = "2009-01-01")   # eur
santand <- tq_get("SAN", from = "2009-01-01") # usd
deutsch <- tq_get("DB", from = "2009-01-01") # usd
ubs     <- tq_get("UBS", from = "2009-01-01")
cs      <- tq_get("CS", from = "2009-01-01")
usd_eur <- tq_get("DEXUSEU",
get = "economic.data", from = "2009-01-01")
chf_usd <- tq_get("DEXSZUS",
get = "economic.data", from = "2009-01-01")
mutate_exchange <- function(data, exchangerates, inverse = F, datecol = "date", ratecol = "price", adjustedcol = "adjusted") {
if (inverse) {
exchangerates <- exchangerates %>% mutate(!!ratecol := 1/!!as.name(ratecol))
}
out <- left_join(data, exchangerates, by = "date") %>%
mutate(!!ratecol := na.locf(!!as.name(ratecol))) %>%
mutate(adjusted_ex = !!as.name(adjustedcol)/!!as.name(ratecol)) %>%
select(-one_of("exrate")) %>%
rename(exrate = !!as.name(ratecol))
return(out)
}
data <- bind_rows(
hsbc    %>%
mutate_exchange(chf_usd, inverse = T) %>%
mutate(stock = "HSBC") %>%
select(date, stock, adjusted_ex),
paribas %>%
mutate_exchange(usd_eur, inverse = T) %>%
mutate_exchange(chf_usd, inverse = T, adjustedcol = "adjusted_ex") %>%
mutate(stock = "BNP Paribas") %>%
select(date, stock, adjusted_ex),
credagr %>%
mutate_exchange(usd_eur, inverse = T) %>%
mutate_exchange(chf_usd, inverse = T, adjustedcol = "adjusted_ex") %>%
mutate(stock = "Crédit Agricole") %>%
select(date, stock, adjusted_ex),
santand %>%
mutate_exchange(chf_usd, inverse = T) %>%
mutate(stock = "Santander") %>%
select(date, stock, adjusted_ex),
deutsch %>%
mutate_exchange(chf_usd, inverse = T) %>%
mutate(stock = "Deutsche Bank") %>%
select(date, stock, adjusted_ex),
ubs     %>%
mutate(adjusted = if_else(adjusted > 100, lag(adjusted, 7), adjusted)) %>%
mutate_exchange(chf_usd, inverse = T) %>%
mutate(stock = "UBS") %>%
select(date, stock, adjusted_ex),
cs      %>%
mutate_exchange(chf_usd, inverse = T) %>%
mutate(stock = "Credit Suisse") %>%
select(date, stock, adjusted_ex)
)
returns <- data %>%
arrange(stock, date) %>%
group_by(stock) %>%
mutate(return = adjusted_ex/lag(adjusted_ex)-1,
return_ln = log(adjusted_ex/lag(adjusted_ex)))
returns %>% saveRDS("returns.RDS")
returns <- readRDS("returns.RDS")
# 10 years
returns_plot <- returns %>%
filter(!is.na(return_ln),
# cut-off date
date >= "2009-05-06") %>%
mutate(cumret_ln = cumsum(return_ln),
adjusted_ln = exp(cumret_ln))
returns_plot %>%
ggplot(aes(x = date, y = adjusted_ln-1, color = stock)) +
geom_line() +
geom_label_repel(aes(label = if_else(date == "2019-05-03", stock, NA_character_)),
size = 3) +
# geom_text_repel(aes(label = stock, x = tail())) +
scale_x_date(expand = c(0,0),
date_breaks = "1 year",
date_labels = "%Y") +
scale_y_continuous(labels = scales::percent,
breaks = seq(-0.8, 0.9, by = 0.2)) +
labs(x = "", y = "",
title = "Entwicklung Frankenkurs Bankaktien in %",
subtitle = "seit 2009") +
theme_tq() +
theme(legend.position = "none")
# 5 years
returns_plot <- returns %>%
filter(!is.na(return_ln),
# cut-off date
date >= "2014-05-06") %>%
mutate(cumret_ln = cumsum(return_ln),
adjusted_ln = exp(cumret_ln))
returns_plot %>%
ggplot(aes(x = date, y = adjusted_ln-1, color = stock)) +
geom_line() +
geom_label_repel(aes(label = if_else(date == "2019-05-03", stock, NA_character_)),
size = 3) +
# geom_text_repel(aes(label = stock, x = tail())) +
scale_x_date(expand = c(0,0),
date_breaks = "1 year",
date_labels = "%Y") +
scale_y_continuous(labels = scales::percent,
breaks = seq(-0.8, 0.9, by = 0.2)) +
labs(x = "", y = "",
title = "Entwicklung Frankenkurs Bankaktien in %",
subtitle = "seit 2014") +
theme_tq() +
theme(legend.position = "none")
# 2 years
returns_plot <- returns %>%
filter(!is.na(return_ln),
# cut-off date
date >= "2017-05-06") %>%
mutate(cumret_ln = cumsum(return_ln),
adjusted_ln = exp(cumret_ln))
returns_plot %>%
ggplot(aes(x = date, y = adjusted_ln-1, color = stock)) +
geom_line() +
geom_label_repel(aes(label = if_else(date == "2019-05-03", stock, NA_character_)),
size = 3) +
# geom_text_repel(aes(label = stock, x = tail())) +
scale_x_date(expand = c(0,0),
date_breaks = "1 year",
date_labels = "%Y") +
scale_y_continuous(labels = scales::percent,
breaks = seq(-0.8, 0.9, by = 0.2)) +
labs(x = "", y = "",
title = "Entwicklung Frankenkurs Bankaktien in %",
subtitle = "seit 2017") +
theme_tq() +
theme(legend.position = "none")
# 1 year
returns_plot <- returns %>%
filter(!is.na(return_ln),
# cut-off date
date >= "2018-05-06") %>%
mutate(cumret_ln = cumsum(return_ln),
adjusted_ln = exp(cumret_ln))
returns_plot %>%
ggplot(aes(x = date, y = adjusted_ln-1, color = stock)) +
geom_line() +
geom_label_repel(aes(label = if_else(date == "2019-05-03", stock, NA_character_)),
size = 3) +
# geom_text_repel(aes(label = stock, x = tail())) +
scale_x_date(expand = c(0,0),
date_breaks = "3 months",
date_labels = "%m.%Y") +
scale_y_continuous(labels = scales::percent,
breaks = seq(-0.8, 0.9, by = 0.2)) +
labs(x = "", y = "",
title = "Entwicklung Frankenkurs Bankaktien in %",
subtitle = "seit 2018") +
theme_tq() +
theme(legend.position = "none")
setwd("~/Documents/R/mgei.github.io")
library(blogdown)
install.packages("blogdown")
library(blogdown)
?blogdown::new_site()
hugo_version()
setwd("~/Documents/R/mgei.github.io")
new_site(theme = "MunifTanjim/minimo")
ls
Sys.ls
setwd("~/Documents/R/mgei.github.io")
new_site(theme = "MunifTanjim/minimo")
blogdown::build_dir()
blogdown::serve_site()
?ggplot::register_google
?ggmap::register_google
install.packages("ggmap")
?ggmap::register_google
register_google()
library(ggmap)
register_google()
?register_google()
stop_server()
build_site()
setwd("~/Documents/R/gh-page")
build_site()
setwd("~/Documents/R/gh-page")
setwd("~/Documents/R/gh-page")
build_site()
getwd()
build_site()
blogdown::serve_site()
config
